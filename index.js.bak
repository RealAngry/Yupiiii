const { Client, GatewayIntentBits, Partials, Collection, EmbedBuilder, REST, Routes } = require('discord.js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// Create client instance
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.GuildPresences,
        GatewayIntentBits.GuildMessageReactions,
        GatewayIntentBits.DirectMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildBans,
        GatewayIntentBits.GuildEmojisAndStickers,
        GatewayIntentBits.GuildIntegrations,
        GatewayIntentBits.GuildWebhooks,
        GatewayIntentBits.GuildInvites,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildModeration,
        GatewayIntentBits.GuildMessageTyping,
        GatewayIntentBits.GuildScheduledEvents
    ],
    partials: [
        Partials.Channel,
        Partials.Message,
        Partials.User,
        Partials.GuildMember,
        Partials.Reaction,
        Partials.ThreadMember
    ]
});

// Global variables
client.commands = new Collection();
client.aliases = new Collection();
client.slashCommands = new Collection(); // Separate collection for slash commands
client.categories = fs.readdirSync("./commands/");
client.prefix = process.env.PREFIX || "-";
client.afkUsers = new Map();
client.cooldowns = new Collection();
client.settings = new Map();
client.warnings = new Map();
client.spamTracker = new Map();
client.modlogs = new Map();
client.raidMode = new Map();
client.joinedMembers = new Map();

// Create folder structure if it doesn't exist
const directories = ['commands', 'events', 'utils', 'slash'];
const commandCategories = ['moderation', 'utility', 'config', 'automod'];

for (const dir of directories) {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir);
    }
}

for (const category of commandCategories) {
    const categoryPath = path.join(__dirname, 'commands', category);
    if (!fs.existsSync(categoryPath)) {
        fs.mkdirSync(categoryPath, { recursive: true });
    }
}

// Load regular commands
function loadCommands(directory) {
    const commandPath = path.join(__dirname, directory);
    const commandFolders = fs.readdirSync(commandPath);
    
    for (const folder of commandFolders) {
        const commandFiles = fs.readdirSync(`${commandPath}/${folder}`).filter(file => file.endsWith('.js'));
        
        for (const file of commandFiles) {
            const filePath = path.join(commandPath, folder, file);
            const command = require(filePath);
            
            // Set a new item in the Collection with the key as the command name and the value as the exported module
            if (command.name) {
                client.commands.set(command.name, command);
                console.log(`Loaded command: ${command.name}`);
                
                // If command has aliases, set them in the aliases collection
                if (command.aliases && Array.isArray(command.aliases)) {
                    command.aliases.forEach(alias => {
                        client.aliases.set(alias, command.name);
                    });
                }
            }
        }
    }
}

// Load slash commands
function loadSlashCommands(directory) {
    const slashCommandPath = path.join(__dirname, directory);
    
    if (!fs.existsSync(slashCommandPath)) {
        fs.mkdirSync(slashCommandPath, { recursive: true });
        console.log(`Created directory: ${directory}`);
        return; // Exit if directory was just created (no files yet)
    }
    
    const slashCommandFiles = fs.readdirSync(slashCommandPath).filter(file => file.endsWith('.js'));

    for (const file of slashCommandFiles) {
        const filePath = path.join(slashCommandPath, file);
        const command = require(filePath);

        if (command.data) {
            client.slashCommands.set(command.data.name, command);
            console.log(`Loaded slash command: ${command.data.name}`);
        }
    }
}

// Register slash commands with Discord API
async function registerSlashCommands() {
    try {
        const commands = [];
        client.slashCommands.forEach(command => {
            if (command.data) {
                commands.push(command.data.toJSON());
            }
        });

        if (commands.length > 0) {
            const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);
            
            console.log('Started refreshing application (/) commands.');
            
            await rest.put(
                Routes.applicationCommands(client.user.id),
                { body: commands },
            );
            
            console.log(`Successfully registered ${commands.length} application (/) commands.`);
        } else {
            console.log('No slash commands found to register.');
        }
    } catch (error) {
        console.error('Error registering slash commands:', error);
    }
}

// Handle process events
process.on('unhandledRejection', error => {
    console.error('Unhandled promise rejection:', error);
});

process.on('uncaughtException', error => {
    console.error('Uncaught exception:', error);
});

// SINGLE EVENT HANDLERS - NO DUPLICATES

// Ready event - only runs once when bot is ready
client.once('ready', async () => {
    console.log(`Logged in as ${client.user.tag}!`);
    console.log(`Bot prefix: ${client.prefix}`);
    
    // Load commands
    loadCommands('commands');
    loadSlashCommands('slash');
    
    console.log(`Loaded ${client.commands.size} regular commands and ${client.aliases.size} aliases`);
    console.log(`Loaded ${client.slashCommands.size} slash commands`);
    console.log(`Bot is ready to serve in ${client.guilds.cache.size} servers!`);
    
    // Register slash commands with Discord API
    await registerSlashCommands();
});

// Message event - handles prefix commands
client.on('messageCreate', async message => {
    if (!message.guild || message.author.bot) return;

    const prefix = client.prefix;
    if (!message.content.startsWith(prefix)) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const commandName = args.shift().toLowerCase();

    // Handle setprefix command
    if (commandName === 'setprefix') {
        const newPrefix = args[0];
        if (!newPrefix) return message.reply('Please provide a new prefix.');

        client.prefix = newPrefix;
        console.log(`Prefix updated to: ${newPrefix}`);
        return message.reply(`Prefix updated to: ${newPrefix}`);
    }

    // Get command from collection
    const command = client.commands.get(commandName) || client.commands.get(client.aliases.get(commandName));
    if (!command) return;

    try {
        command.execute(client, message, args);
    } catch (error) {
        console.error(error);
        message.reply('There was an error executing that command.');
    }
});

// Interaction event - handles slash commands
client.on('interactionCreate', async interaction => {
    if (!interaction.isCommand()) return;

    const command = client.slashCommands.get(interaction.commandName);
    if (!command) return;

    try {
        await command.execute(interaction);
    } catch (error) {
        console.error(error);
        await interaction.reply({ 
            content: 'There was an error executing this command!', 
            ephemeral: true 
        });
    }
});

// Load event handlers from files
const eventPath = path.join(__dirname, 'events');
const eventFiles = fs.readdirSync(eventPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
    const filePath = path.join(eventPath, file);
    const event = require(filePath);
    
    // Skip messageCreate, ready, and interactionCreate as we handle them directly
    if (['messageCreate', 'ready', 'interactionCreate'].includes(event.name)) {
        console.log(`Skipping event: ${event.name} (handled directly in index.js)`);
        continue;
    }
    
    if (event.once) {
        client.once(event.name, (...args) => event.execute(...args, client));
    } else {
        client.on(event.name, (...args) => event.execute(...args, client));
    }
    console.log(`Loaded event: ${event.name}`);
}

// Login to Discord
client.login(process.env.TOKEN).catch(err => {
    console.error('Failed to login to Discord:', err);
}); 
}); 